# Generated by Django 3.2.6 on 2024-11-29 15:38

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='HealthyRecipe',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('URL', models.CharField(max_length=1000)),
                ('Name', models.CharField(max_length=1000)),
                ('fiber_g', models.CharField(max_length=1000)),
                ('sodium_g', models.CharField(max_length=1000)),
                ('carbohydrates_g', models.CharField(max_length=1000)),
                ('fat_g', models.CharField(max_length=1000)),
                ('protein_g', models.CharField(max_length=1000)),
                ('sugar_g', models.CharField(max_length=1000)),
                ('saturate_g', models.CharField(max_length=1000)),
                ('size_g', models.CharField(max_length=1000)),
                ('Servings', models.CharField(max_length=1000)),
                ('calories_kCal', models.CharField(max_length=1000)),
                ('category', models.CharField(max_length=1000)),
                ('image_link', models.CharField(max_length=1000)),
                ('fat_100g', models.CharField(max_length=1000)),
                ('fiber_100g', models.CharField(max_length=1000)),
                ('sugar_100g', models.CharField(max_length=1000)),
                ('saturated_100g', models.CharField(max_length=1000)),
                ('sodium_100mg', models.CharField(max_length=1000)),
                ('carbohydrates_100g', models.CharField(max_length=1000)),
                ('kj_100g', models.CharField(max_length=1000)),
                ('Nutri_score', models.CharField(max_length=1000)),
                ('Fsa_new', models.CharField(max_length=1000)),
                ('salt_100g', models.CharField(max_length=1000)),
                ('salt_g', models.CharField(max_length=1000)),
                ('fat_count', models.CharField(max_length=1000)),
                ('satfat_count', models.CharField(max_length=1000)),
                ('sugar_count', models.CharField(max_length=1000)),
                ('salt_count', models.CharField(max_length=1000)),
                ('NumberRatings', models.CharField(max_length=1000)),
                ('content', models.CharField(max_length=1000)),
                ('healthiness', models.CharField(max_length=1000)),
                ('recipe_cal', models.CharField(max_length=1000)),
                ('recipe_cal_per', models.CharField(max_length=1000)),
                ('recipe_col', models.CharField(max_length=1000)),
                ('recipe_col_per', models.CharField(max_length=1000)),
                ('recipe_fiber', models.CharField(max_length=1000)),
                ('recipe_fiber_per', models.CharField(max_length=1000)),
                ('recipe_sodium', models.CharField(max_length=1000)),
                ('recipe_sodium_per', models.CharField(max_length=1000)),
                ('recipe_carbs', models.CharField(max_length=1000)),
                ('recipe_carbs_per', models.CharField(max_length=1000)),
                ('recipe_fat', models.CharField(max_length=1000)),
                ('recipe_fat_per', models.CharField(max_length=1000)),
                ('recipe_protein', models.CharField(max_length=1000)),
                ('recipe_protein_per', models.CharField(max_length=1000)),
                ('recipe_serving_size', models.CharField(max_length=1000)),
                ('recipe_serving', models.CharField(max_length=1000)),
                ('recipe_calories', models.CharField(max_length=1000)),
                ('recipe_calories_fat', models.CharField(max_length=1000)),
                ('recipe_total_fat', models.CharField(max_length=1000)),
                ('recipe_total_fat_per', models.CharField(max_length=1000)),
                ('recipe_saturated_fat', models.CharField(max_length=1000)),
                ('recipe_saturated_fat_unit', models.CharField(max_length=1000)),
                ('recipe_saturated_fat_per', models.CharField(max_length=1000)),
                ('recipe_cholesterol', models.CharField(max_length=1000)),
                ('recipe_cholesterol_unit', models.CharField(max_length=1000)),
                ('recipe_cholesterol_per', models.CharField(max_length=1000)),
                ('recipe_sodium1', models.CharField(max_length=1000)),
                ('recipe_sodium1_unit', models.CharField(max_length=1000)),
                ('recipe_sodium1_per', models.CharField(max_length=1000)),
                ('recipe_potassium', models.CharField(max_length=1000)),
                ('recipe_potassium_unit', models.CharField(max_length=1000)),
                ('recipe_potassium_per', models.CharField(max_length=1000)),
                ('recipe_carbs1', models.CharField(max_length=1000)),
                ('recipe_carbs1_unit', models.CharField(max_length=1000)),
                ('recipe_carbs1_per', models.CharField(max_length=1000)),
                ('recipe_fiber1', models.CharField(max_length=1000)),
                ('recipe_fiber1_unit', models.CharField(max_length=1000)),
                ('recipe_fiber1_per', models.CharField(max_length=1000)),
                ('recipe_prot', models.CharField(max_length=1000)),
                ('recipe_prot_unit', models.CharField(max_length=1000)),
                ('recipe_prot_per', models.CharField(max_length=1000)),
                ('recipe_sugar', models.CharField(max_length=1000)),
                ('recipe_sugar_unit', models.CharField(max_length=1000)),
                ('recipe_vita', models.CharField(max_length=1000)),
                ('recipe_vita_per', models.CharField(max_length=1000)),
                ('recipe_vitc', models.CharField(max_length=1000)),
                ('recipe_vitc_per', models.CharField(max_length=1000)),
                ('recipe_calcium', models.CharField(max_length=1000)),
                ('recipe_calcium_per', models.CharField(max_length=1000)),
                ('recipe_iron', models.CharField(max_length=1000)),
                ('recipe_iron_per', models.CharField(max_length=1000)),
                ('recipe_thiamin', models.CharField(max_length=1000)),
                ('recipe_thiamin_per', models.CharField(max_length=1000)),
                ('recipe_niacin', models.CharField(max_length=1000)),
                ('recipe_niacin_per', models.CharField(max_length=1000)),
                ('recipe_vitb6', models.CharField(max_length=1000)),
                ('recipe_vitb6_per', models.CharField(max_length=1000)),
                ('recipe_magnesium', models.CharField(max_length=1000)),
                ('recipe_magnesium_per', models.CharField(max_length=1000)),
                ('recipe_folate', models.CharField(max_length=1000)),
                ('recipe_folate_per', models.CharField(max_length=1000)),
            ],
            options={
                'verbose_name': 'HealthyRecipes',
                'db_table': 'HealthyRecipes',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Personal_info',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='Personal_info', editable=False, max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('age', models.CharField(choices=[(None, ''), ('under_18', 'Under 18'), ('b18_24', '18-24'), ('b25_35', '25-35'), ('b35_45', '35-45'), ('b45_55', '45-55'), ('bover_55', 'Over 55')], default=None, max_length=120, verbose_name='age')),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('education', models.CharField(choices=[(None, ''), ('Less_high_school', 'Less than high school'), ('High_school', 'High school or equivalent'), ('BA', 'Bachelor degree (e.g. BA, BSc)'), ('MSc', 'Master degree (e.g. MA, MSc)'), ('Doctorate', 'Doctorate (e.g. PhD)'), ('Not', 'Prefer not to say')], default=None, max_length=120, verbose_name='education')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('refuse_to_disc', 'Other / Prefer not to say')], default=None, max_length=300, verbose_name='gender')),
                ('FK_9', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=300, verbose_name='FK_9')),
                ('FK_10', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=300, verbose_name='FK_10')),
                ('FK_11', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=300, verbose_name='FK_11')),
                ('FK_12', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=300, verbose_name='FK_12')),
                ('sus_1', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=300, verbose_name='sus_1')),
                ('sus_2', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=300, verbose_name='sus_2')),
                ('sus_3', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=300, verbose_name='sus_3')),
                ('sus_4', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=300, verbose_name='sus_4')),
                ('session_id', models.CharField(default=None, max_length=100)),
            ],
            options={
                'verbose_name': 'personal_info',
                'db_table': 'personal_info',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='UnhealthyRecipe',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('URL', models.CharField(max_length=1000)),
                ('Name', models.CharField(max_length=1000)),
                ('fiber_g', models.CharField(max_length=1000)),
                ('sodium_g', models.CharField(max_length=1000)),
                ('carbohydrates_g', models.CharField(max_length=1000)),
                ('fat_g', models.CharField(max_length=1000)),
                ('protein_g', models.CharField(max_length=1000)),
                ('sugar_g', models.CharField(max_length=1000)),
                ('saturate_g', models.CharField(max_length=1000)),
                ('size_g', models.CharField(max_length=1000)),
                ('Servings', models.CharField(max_length=1000)),
                ('calories_kCal', models.CharField(max_length=1000)),
                ('category', models.CharField(max_length=1000)),
                ('image_link', models.CharField(max_length=1000)),
                ('fat_100g', models.CharField(max_length=1000)),
                ('fiber_100g', models.CharField(max_length=1000)),
                ('sugar_100g', models.CharField(max_length=1000)),
                ('saturated_100g', models.CharField(max_length=1000)),
                ('sodium_100mg', models.CharField(max_length=1000)),
                ('carbohydrates_100g', models.CharField(max_length=1000)),
                ('kj_100g', models.CharField(max_length=1000)),
                ('Nutri_score', models.CharField(max_length=1000)),
                ('Fsa_new', models.CharField(max_length=1000)),
                ('salt_100g', models.CharField(max_length=1000)),
                ('salt_g', models.CharField(max_length=1000)),
                ('fat_count', models.CharField(max_length=1000)),
                ('satfat_count', models.CharField(max_length=1000)),
                ('sugar_count', models.CharField(max_length=1000)),
                ('salt_count', models.CharField(max_length=1000)),
                ('NumberRatings', models.CharField(max_length=1000)),
                ('content', models.CharField(max_length=1000)),
                ('healthiness', models.CharField(max_length=1000)),
                ('recipe_cal', models.CharField(max_length=1000)),
                ('recipe_cal_per', models.CharField(max_length=1000)),
                ('recipe_col', models.CharField(max_length=1000)),
                ('recipe_col_per', models.CharField(max_length=1000)),
                ('recipe_fiber', models.CharField(max_length=1000)),
                ('recipe_fiber_per', models.CharField(max_length=1000)),
                ('recipe_sodium', models.CharField(max_length=1000)),
                ('recipe_sodium_per', models.CharField(max_length=1000)),
                ('recipe_carbs', models.CharField(max_length=1000)),
                ('recipe_carbs_per', models.CharField(max_length=1000)),
                ('recipe_fat', models.CharField(max_length=1000)),
                ('recipe_fat_per', models.CharField(max_length=1000)),
                ('recipe_protein', models.CharField(max_length=1000)),
                ('recipe_protein_per', models.CharField(max_length=1000)),
                ('recipe_serving_size', models.CharField(max_length=1000)),
                ('recipe_serving', models.CharField(max_length=1000)),
                ('recipe_calories', models.CharField(max_length=1000)),
                ('recipe_calories_fat', models.CharField(max_length=1000)),
                ('recipe_total_fat', models.CharField(max_length=1000)),
                ('recipe_total_fat_per', models.CharField(max_length=1000)),
                ('recipe_saturated_fat', models.CharField(max_length=1000)),
                ('recipe_saturated_fat_unit', models.CharField(max_length=1000)),
                ('recipe_saturated_fat_per', models.CharField(max_length=1000)),
                ('recipe_cholesterol', models.CharField(max_length=1000)),
                ('recipe_cholesterol_unit', models.CharField(max_length=1000)),
                ('recipe_cholesterol_per', models.CharField(max_length=1000)),
                ('recipe_sodium1', models.CharField(max_length=1000)),
                ('recipe_sodium1_unit', models.CharField(max_length=1000)),
                ('recipe_sodium1_per', models.CharField(max_length=1000)),
                ('recipe_potassium', models.CharField(max_length=1000)),
                ('recipe_potassium_unit', models.CharField(max_length=1000)),
                ('recipe_potassium_per', models.CharField(max_length=1000)),
                ('recipe_carbs1', models.CharField(max_length=1000)),
                ('recipe_carbs1_unit', models.CharField(max_length=1000)),
                ('recipe_carbs1_per', models.CharField(max_length=1000)),
                ('recipe_fiber1', models.CharField(max_length=1000)),
                ('recipe_fiber1_unit', models.CharField(max_length=1000)),
                ('recipe_fiber1_per', models.CharField(max_length=1000)),
                ('recipe_prot', models.CharField(max_length=1000)),
                ('recipe_prot_unit', models.CharField(max_length=1000)),
                ('recipe_prot_per', models.CharField(max_length=1000)),
                ('recipe_sugar', models.CharField(max_length=1000)),
                ('recipe_sugar_unit', models.CharField(max_length=1000)),
                ('recipe_vita', models.CharField(max_length=1000)),
                ('recipe_vita_per', models.CharField(max_length=1000)),
                ('recipe_vitc', models.CharField(max_length=1000)),
                ('recipe_vitc_per', models.CharField(max_length=1000)),
                ('recipe_calcium', models.CharField(max_length=1000)),
                ('recipe_calcium_per', models.CharField(max_length=1000)),
                ('recipe_iron', models.CharField(max_length=1000)),
                ('recipe_iron_per', models.CharField(max_length=1000)),
                ('recipe_thiamin', models.CharField(max_length=1000)),
                ('recipe_thiamin_per', models.CharField(max_length=1000)),
                ('recipe_niacin', models.CharField(max_length=1000)),
                ('recipe_niacin_per', models.CharField(max_length=1000)),
                ('recipe_vitb6', models.CharField(max_length=1000)),
                ('recipe_vitb6_per', models.CharField(max_length=1000)),
                ('recipe_magnesium', models.CharField(max_length=1000)),
                ('recipe_magnesium_per', models.CharField(max_length=1000)),
                ('recipe_folate', models.CharField(max_length=1000)),
                ('recipe_folate_per', models.CharField(max_length=1000)),
            ],
            options={
                'verbose_name': 'UnhealthyRecipes',
                'db_table': 'UnhealthyRecipes',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Recommendations',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('recommended_recipes', models.CharField(max_length=500)),
                ('healthiness', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='Profile', editable=False, max_length=50)),
                ('Height', models.IntegerField()),
                ('Weight', models.IntegerField()),
                ('RecipeWebUsage', models.CharField(choices=[(None, ''), ('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly')], default=None, max_length=300, verbose_name='RecipeWebUsage')),
                ('HomeCook', models.CharField(choices=[(None, ''), ('Daily', 'Daily'), ('Weekly', 'Weekly'), ('Monthly', 'Monthly')], default=None, max_length=300, verbose_name='HomeCook')),
                ('CookingExp', models.CharField(choices=[(None, ''), ('Very_Low', 'Very Low'), ('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Very_High', 'Very High')], default=None, max_length=300, verbose_name='CookingExp')),
                ('EatingGoals', models.CharField(choices=[(None, ''), ('Lose Weight', 'Lose Weight'), ('Gain Weight', 'Gain Weight'), ('No Goal', 'No Goal')], default=None, max_length=300, verbose_name='HomeCook')),
                ('Depression', models.CharField(choices=[(None, ''), ('Not at all', 'Not at all'), ('Somewhat', 'Somewhat'), ('Quite a lot', 'Quite a lot')], default=None, max_length=300, verbose_name='mood')),
                ('PhysicalActivity', models.CharField(choices=[(None, ''), ('A lot (>9h)', 'A lot >9h'), ('Average (=6h)', 'Average (=6h)'), ('Not enough (<3h)', 'Not enough (<3h)')], default=None, max_length=300, verbose_name='PhysicalActivity')),
                ('SleepHours', models.CharField(choices=[(None, ''), ('≤7h', '≤7h'), ('7-9h', '7-9h'), ('≥9h', '≥9h')], default=None, max_length=300, verbose_name='sleephours')),
                ('CookingTime', models.CharField(choices=[(None, ''), ('≤30min', '≤30min'), ('30-60min', '30-60min'), ('≥60min', '≥60min')], default=None, max_length=300, verbose_name='CookingTime')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
            options={
                'verbose_name': 'Profile',
                'db_table': 'Profile',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[(None, ''), ('Fruits and Vegetables', 'Fruits and Vegetables'), ('Meat and Poultry', 'Meat and Poultry'), ('Barbecue', 'Barbecue'), ('Seafood Pasta and Noodles', 'Seafood Pasta and Noodles')], default=None, max_length=50, verbose_name='Category')),
                ('recipe_popularity', models.CharField(default=None, max_length=50, verbose_name='recipe_popularity')),
                ('calories', models.IntegerField(validators=[django.core.validators.MinValueValidator(200), django.core.validators.MaxValueValidator(1000)])),
                ('recipe_size', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('preparation_time', models.IntegerField(validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(60)])),
                ('n_ingredient', models.IntegerField(validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(10)])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('session_id', models.CharField(default=None, max_length=100)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
            options={
                'verbose_name': 'FoodCategory',
                'db_table': 'FoodCategory',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='EvaluateChoices',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='EvaluateChoices', editable=False, max_length=50)),
                ('liked_recipes', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='liked_recipes')),
                ('prepare_recipes', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='prepare_recipes')),
                ('fit_preference', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='fit_preference')),
                ('know_many', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='know_many')),
                ('recommend_recipe', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='recommend_recipe')),
                ('many_to_choose', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='many_to_choose')),
                ('easy_choice', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='easy_choice')),
                ('choice_overwhelming', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='choice_overwhelming')),
                ('sys_time', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='sys_time')),
                ('unders_sys', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='unders_sys')),
                ('many_actions', models.CharField(choices=[(None, ''), ('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='many_actions')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('session_id', models.CharField(default=None, max_length=100)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
            options={
                'verbose_name': 'EvaluateChoices',
                'db_table': 'EvaluateChoices',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SelectedRecipe',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('recipe_id', models.IntegerField()),
                ('recipe_name', models.CharField(max_length=200)),
                ('Nutri_score', models.CharField(max_length=100)),
                ('fsa_score', models.CharField(max_length=100)),
                ('healthiness', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('session_id', models.CharField(default=None, max_length=100)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
            options={
                'verbose_name': 'selectedRecipe',
                'db_table': 'selectedrecipe',
                'unique_together': {('person', 'recipe_id')},
            },
        ),
    ]
